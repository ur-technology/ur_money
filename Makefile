# Build information
NOW			           := $(shell date)
GITHASH                := $(shell git describe --tags --always)

# Ionic setup
IONIC_BINARY           := ionic
IONIC_CMD_SERVE        := serve -c
IONIC_CMD_RUN_ANDROID  := run android -c --prod
IONIC_CMD_BUILD        := build --prod

# NPM setup
NPM_BINARY             := npm
NPM_CMD_INSTALL_GLOBAL := install -g

# NPM functions
install_global_npm     = sudo $(NPM_BINARY) $(NPM_CMD_INSTALL_GLOBAL) $(1)

# Config setup
CONFIG_PATH            = src/config/config.ts

# Config functions
overwrite_config       = cp src/config/config.$(1).ts $(CONFIG_PATH)

# The default operation is to serve the application in dev mode.
run: run-development

# Run a webserver in dev mode.
# The version file must be generated before execution in order to
# prevent potential TypeScript errors.
run-development: version-file
	@$(IONIC_BINARY) $(IONIC_CMD_SERVE)

# Run the application on a connected android in production mode.
# The version file must be generated before execution in order to
# prevent potential TypeScript errors.
run-android: version-file
	@$(IONIC_BINARY) $(IONIC_CMD_RUN_ANDROID)

# Deploy to https://ur-money-staging.firebaseapp.com
deploy-staging: version-file
	@$(call overwrite_config,staging)
	@$(IONIC_BINARY) $(IONIC_CMD_BUILD)  
	@sed -i '' 's/__VERSION__/$(GITHASH)/' www/index.html
	@sed -e 's/<\/title>/<\/title><base href=\/">/' www/index.html > www/index.web.html 
	@firebase deploy --project ur-money-staging

# Deploy to https://web.ur.technology
deploy-production: version-file
	@$(call overwrite_config,production)
	@$(IONIC_BINARY) $(IONIC_CMD_BUILD)  
	@sed -i '' 's/__VERSION__/$(GITHASH)/' www/index.html
	@sed -e 's/<\/title>/<\/title><base href=\/">/' www/index.html > www/index.web.html 
	@firebase deploy --project ur-money-production

# Generate a version TypeScript file containing the current date
# and a version based on the current git tag.
version-file:
	@echo "Generating version file..."
	@mkdir -p ./src/version
	@printf '// This file is automatically generated, do not edit!\nexport let BuildVersion:string = "$(GITHASH)";\nexport let BuildDate:string = "$(NOW)";\n' > src/version/version.ts
	@echo "Done; version file created for '$(GITHASH)'."

# Install everything, including the basic tools and the proper
# version, the local NPM modules, the typings, and the ionic
# plugins. This can be run on a fresh build machien to set up
# the application for development.
install: clean install-global-binaries install-local-deps install-typings restore-ionic-state
	@echo "Done! Run 'make run' to serve the application locally."

# Make sure the main tools are installed at the proper version.
# There isn't a good way to know if the tools are installled
# already, so this forces an overwrite â€“ as such, it shouldn't
# be run very often.
install-global-binaries:
	@echo "Installing global binaries. This requires superuser access."
	@$(call install_global_npm,ionic@2.2.1)
	@$(call install_global_npm,cordova@6.5.0)
	@$(call install_global_npm,typings@2.1.0)

# Get node_modules up to date. There's an issue where the firebase
# typings are delivered in angularfire and the main firebase package,
# which causes linting errors. Deleting one of them solves the problem.
install-local-deps:
	@echo "Installing local npm dependencies"
	@npm install

# Make sure typings are up to date
install-typings:
	@echo "Installing typings from typings.json..."
	@typings install

# Install all ionic plugins
restore-ionic-state:
	@ionic state restore

# Remove node modules. This typically happens before installation.
clean:
	@rm -rf ./node_modules
